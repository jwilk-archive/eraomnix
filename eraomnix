#!/usr/bin/perl

use strict;
use warnings;

package EraOmnix;
my $this = __PACKAGE__;

use base qw(kawute);

our $VERSION = '0.8.2';
sub version($) { $EraOmnix::VERSION; }
sub site($) { 'eraomnix.pl'; }
sub software_name($) { 'eraomnix'; }
sub config_file($) { 'eraomnix.conf'; }
sub cookie_domain($) { 'www.eraomnix.pl'; }

sub lwp_init($)
{
  require Crypt::SSLeay;
  my ($this) = @_;
  my $ua = kawute::lwp_init($this);
  return $ua;
}

sub fix_number($$)
{
  my ($this, $number) = @_;
  $this->quit('No such recipient') unless $number =~ /^(?:\+?48)?(\d{9})$/;
  return $1;
}

my $login = '';
my $password;
my $proto = 'https';
my $signature = undef;
my $mms = 0;

sub main($)
{
  my ($this) = @_;
  use constant
  {
    ACTION_VOID =>   sub { $this->action_void(); },
    ACTION_SEND =>   sub { $this->action_send(); },
    ACTION_COUNT =>  sub { $this->action_count(); },
    ACTION_INBOX =>  sub { $this->action_inbox(); },
    ACTION_LOGOUT => sub { $this->action_logout(); }
  };

  my $action = ACTION_SEND;
  $this->get_options(
    'send|s' =>         sub { $action = ACTION_SEND; },
    'count|c' =>        sub { $action = ACTION_COUNT; },
    'inbox|m' =>        sub { $action = ACTION_INBOX; },
    'logout' =>         sub { $action = ACTION_LOGOUT; },
    'void' =>           sub { $action = ACTION_VOID; },
    'signature=s' =>    \$signature,
    'mms' =>            \$mms,
  );
  $this->go_home();
  $this->read_config
  (
    'login' => sub 
      { $login = shift; },
    'password' => sub 
      { $password = shift; },
    'password64' => sub
      { 
        require MIME::Base64;
        $password = MIME::Base64::decode(shift);
      },
    'signature' => sub
      { $signature = shift if not defined $signature; },
    'usessl' => sub 
      { $proto = shift() ? 'https' : 'http'; },
  );
  $this->reject_unpersons(0) if $this->force();
  $this->quit('Invalid login name') unless $login =~ /^(\+?48)?([0-9]{9})$/;
  $login = "48$2";
  $this->quit('No password provided') unless defined $password;
  unless (defined $signature)
  {
    $this->debug_print('No signature provided: using an empty signature');
    $signature = '';
  }
  $this->debug_print("Login: $login\@" . $this->site());
  &{$action}();
}

sub do_login($)
{
  my ($this) = @_;
  my $ua = $this->lwp_init();
  $this->debug_print('Warning: unsecure connection!') if $proto eq 'http';
  my $base_url = "$proto://www.eraomnix.pl/msg/user/sponsored/welcome.do";
  my $response = $ua->simple_request($this->lwp_get($base_url));
  if ($response->is_redirect)
  {
    require HTML::Form;
    $this->debug_print('Logging in...');
    my $login_uri = "$proto://www.eraomnix.pl/sso2/omnix_iframe/login.jsp";
    $response = $ua->simple_request($this->lwp_get($login_uri));
    $this->http_error($login_uri) unless $response->is_success;
    my $form = HTML::Form->parse($response);
    my $re_action = qr{/authenticate\.do(;jsessionid=[0-9A-Za-z]+![0-9]+)?$};
    $this->api_error('L1') unless $form->action =~ $re_action;
    $form->value('login' => $login);
    $form->value('password' => $password);
    $response = $ua->simple_request($form->click);
    $this->http_error($form->action) unless $response->is_redirect;
    $this->quit('Login error: blocked account') 
      if $response->header('Location') =~ m{^https?://www\.eraomnix\.pl/pl/login/blocked$};
    $response = $ua->simple_request($this->lwp_get($base_url));
  }
  $this->quit('Login error') if $response->is_redirect;
  $this->http_error($base_url) unless $response->is_success;
  $this->debug_print('Logged in!');
  if ($mms && $response->content =~ /"mmsTab"/)
  {
    require HTML::Form;
    my $form = HTML::Form->parse($response);
    $response = $ua->simple_request($form->click('mmsTab'));
    $this->http_error($form->action) unless $response->is_success;
  }
  elsif (!$mms && $response->content =~ /"smsTab"/)
  {
    require HTML::Form;
    my $form = HTML::Form->parse($response);
    $response = $ua->simple_request($form->click('smsTab'));
    $this->http_error($form->action) unless $response->is_success;
  }
  my $remaining = $this->extract_remaining($response->content);
  return ($ua, $response, $remaining);
}

sub extract_remaining($$)
{
  (my $this, $_) = @_;
  $this->api_error('c1') unless m{Pozosta\xb3o [SM]MS\xf3w: <b>([0-9]+)</b>};
  return int($1);
}

sub action_send($)
{
  my ($this) = @_;
  my $number;
  my ($body, $body_len);
  my $signature_len;
  my $message_len;

  $this->pod2usage(1) if $#ARGV != 1;

  require Encode;
  require Text::Wrap;
  my $codeset = $this->codeset();
  $this->debug_print("Codeset: $codeset");
  binmode STDERR, ":encoding($codeset)";
  binmode STDOUT, ":encoding($codeset)";
  
  (my $recipient, $body) = @ARGV;
  $recipient = Encode::decode($codeset, $recipient);
  $body = Encode::decode($codeset, $body);
  ($number, $recipient) = $this->resolve_person($recipient);
  $this->debug_print("Recipient: $recipient");
  $body = $this->transliterate($body);
  $signature = $this->transliterate(Encode::decode($codeset, $signature));
  $this->debug_print("Message:\n" . Text::Wrap::wrap("  ", "  ", $body) . "\n\n" . Text::Wrap::wrap("  ", "  ", $signature) . "\n");
  $body_len = length $body;
  $signature_len = length $signature;
  $message_len = $body_len + $signature_len;
  $this->debug_print("Message length: $body_len + $signature_len = $message_len");
  my ($ua, $response, $remaining) = $this->do_login();
  $this->quit('Message limit exceeded') if $remaining == 0;
  $this->debug_print('Ready to send...');
  require HTML::Form;
  my $form = HTML::Form->parse($response);
  my $character_limit = $form->value('top.characterLimit');
  $this->api_error('s1') unless $character_limit =~ /^[0-9]{3}$/;
  $character_limit--;
  $this->quit("Message too long ($body_len + $signature_len > $character_limit)") if $message_len > $character_limit;
  $form->value('top.phoneReceiver' => $number);
  $form->value('top.text' => $body);
  $form->value('top.signature' => $signature);
  $this->debug_print('Sending...');
  $response = $ua->simple_request($form->click('send'));
  $this->http_error($form->action) unless $response->is_success;
  if ($response->content =~ m{<span style="color: red;"><b>(.*?)</b></span>})
  {
    $_ = $1;
    my $info = 'Error while sending the message';
    $info .= ': non-Era recipient' if /spoza sieci PTC/;
    $this->quit($info);
  }
  my $remaining_after = $this->extract_remaining($response->content);
  $this->quit('Error while sending the message, I guess...') unless $remaining_after < $remaining;
  $this->debug_print('Looks OK');
  $this->debug_print("Number of remaining messages: $remaining_after");
}

sub action_count($)
{
  my ($this) = @_;
  ($_, $_, my $remaining) = $this->do_login();
  print "Number of remaining messages: $remaining\n";
}

sub action_inbox($)
{
  require HTML::Entities;
  require Text::Wrap;
  require Encode;
  
  my ($this) = @_;
 
  my ($ua, $res) = $this->do_login();

  my $codeset = $this->codeset();
  $this->debug_print("Codeset: $codeset");
  binmode STDOUT, ":encoding($codeset)";
  
  $res->content =~ m{<span id="inboxSize">([0-9]+)</span>} or $this->api_error('Inbox1');
  my $n = int($1);
  my $url = "$proto://www.eraomnix.pl/msg/user/sponsored/inbox/prepare.do";
  $res = $ua->simple_request($this->lwp_get($url));
  $res->is_success or http_error $url;
  $this->reject_unpersons(0);
  for my $i (0 .. $n-1)
  {
    $res->content =~ m{case\s+$i:\s+document\.getElementById\("textdiv"\)\.innerHTML\s+=\s+'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}),\s+Od:\s+<b>'\s*\+\s*'(\d+)</b>'\s*\+\s*'\s+Do:\s+<b>\d+</b><br/><br/>'\s*\+\s*wrapText\('(.*?)'\);\s*break;} or $this->api_error('Inbox2');
    my ($date, $sender, $text) = ($1, $2, $3);
    $sender = $this->resolve_number($sender);
    print "From: $sender\n";
    print "Date: $date\n";
    $text = HTML::Entities::decode_entities($text);
    $text = Encode::decode('ISO-8859-2', $text);
    $text = "\n" . Text::Wrap::wrap('  ', '  ', $text);
    print "Contents: $text\n\n";
  }
}

main(__PACKAGE__);

__END__

=head1 NAME

eraomnix -- send SMs and MMs via Era Omnix gateway

=head1 SYNOPSIS

=over 4

=item eraomnix [-s] [--mms] [--force] [--signature I<< <signature> >>] I<< <phone-number> >> I<< <text> >>

=item eraomnix -c

=item eraomnix -m

=item eraomnix --logout

=back

=head1 ENVIRONMENT

ERAOMNIX_HOME (default: F<$HOME/.eraomnix/>)

=head1 FILES

=over 4

=item F<$ERAOMNIX_HOME/eraomnix.conf>

=item F<$ERAOMNIX_HOME/cookie-jar.txt>

=back

=head1 AUTHOR

Written by Jakub Wilk E<lt>ubanus@users.sf.netE<gt>.

=head1 COPYRIGHT

You may redistribute copies of B<eraomnix> under the terms of the GNU General Public License, version 2.

=cut

vim:ts=2 sw=2 et
